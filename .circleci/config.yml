version: 2.1


executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker: 
      - image: amazon/aws-cli


commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: on_fail
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: on_fail

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl --insecure "https://kvdb.io/GcvAJSPvEZt4axA4hkbXJ2/migration_<< parameters.id >>")
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: on_fail

jobs:

  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: 
                ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules


  install-frontend-dependencies:
   executor: node
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules


  build-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./backend
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist


  build-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build


  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results


  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results


  scan-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command: 
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical


  scan-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Backend against security vulnerabilities
          working_directory: ./backend
          command: 
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical


  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yaml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend URL in memstash
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)

            #curl -H "Content-Type: text/plain" -H "token: 564ca3e8-c2c4-40a8-8510-84236d6ddf29" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
             curl --insecure https://kvdb.io/GcvAJSPvEZt4axA4hkbXJ2/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      - run:
          name: Deploy frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yaml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible 
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d4:35:43:07:b2:27:b9:33:c8:70:b4:2d:6f:55:49:ac"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            cat inventory
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible/
          command: |
            pwd &&
            ls -la
            ansible-playbook \
               -i .circleci/ansible/inventory* \
               configure-server.yaml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            sudo npm i || cat /root/.npm/_logs/2022-*debug.log
            sudo npm run migrations >> migration_status || sudo cat migration_status
      - run:
          name: Send migration results to Kvdb
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              curl --insecure https://kvdb.io/GcvAJSPvEZt4axA4hkbXJ2/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              curl --insecure https://kvdb.io/GcvAJSPvEZt4axA4hkbXJ2/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  deploy-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          working_directory: ./frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            echo "API_URL=http://${BACKEND_IP}:3030" 
            #echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d4:35:43:07:b2:27:b9:33:c8:70:b4:2d:6f:55:49:ac"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory
            ansible-playbook \
               -i .circleci/ansible/inventory* \
               configure-server.yaml  -vv
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  smoke-test:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            #BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
             #API_URL="http://${BACKEND_IP}:3030"
             #if curl -s $API_URL/api/status | grep "ok"
             #then
             #  exit 0
             #else
             #  exit 1
             #fi       
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export API_URL=http://${BACKEND_IP}:3030
            echo backend-${CIRCLE_WORKFLOW_ID:0:7}
            echo ${API_URL}
            #curl -s $API_URL/api/status | grep -q "ok"
      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com"             
             echo ${URL} 
             if curl -s ${URL} | grep "Welcome"
             then
              exit 0
             else
              exit 1
             fi   
            #FRONTEND_WEBSITE="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/emplotees"
            #curl -s ${FRONTEND_WEBSITE} | grep -q "Welcome"
             
      #- destroy_environment:
      #    id: ${CIRCLE_WORKFLOW_ID:0:7}
      #    when: on_fail
      #- revert_migrations:
      #    id: ${CIRCLE_WORKFLOW_ID:0:7}
      #    when: on_fail


  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old WorkflowID in memstash for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo "Work flow ID: $WorkflowID"
            curl --insecure https://kvdb.io/GcvAJSPvEZt4axA4hkbXJ2/WorkflowID -d "${WorkflowID}"
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yaml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            #if [[ 0d50f14 == "" ]]
            #then
            #echo "No workflow id found"
            #else
            #if [[ "492fbe8" != "0d50f14" ]]
            #then
            #  echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
            #  aws s3 rm "s3://udapeople-0d50f14" --recursive
            #  aws cloudformation delete-stack --stack-name "udapeople-frontend-6f4e40c"
            #  aws cloudformation delete-stack --stack-name "udapeople-backend-6f4e40c"
            #fi
            #fi
             export CurrentWorkflowID=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
             echo Stack names: "${CurrentWorkflowID[@]}"

             export OldWorkflowID=$(curl --insecure https://kvdb.io/GcvAJSPvEZt4axA4hkbXJ2/OldWorkflowID)
             echo Old Workflow ID: $OldWorkflowID

             if [[ "${CurrentWorkflowID[@]}" =~ "${OldWorkflowID}" ]]
             then
               echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"

               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
             else
               echo "$ ==$CurrentWorkflowID => nothing needs to be done..."
             fi
          #environment:
            #TERM: xterm-256color


workflows:
  default:
    jobs:
      ## BUILD AND DEPLOY
      - install-backend-dependencies
      - install-frontend-dependencies

      - build-backend:
          requires:
            - install-backend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            -  build-frontend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend

      ## INFRASTRUCTURE
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
            - configure-infrastructure
          filters:
            branches:
              only:
                - master
      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup:
          requires:
            - cloudfront-update

# VS Code Extension Version: 1.3.0
